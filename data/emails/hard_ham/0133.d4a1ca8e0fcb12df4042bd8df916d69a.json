{"email_subject": "Re: RedHat 8.0 and his own freetype", "email_body": "Following further study, I've concluded:\n\n   1. It is easy to enable the bytecode interpreter.\n\n   2. This noticeably improves rendering of non-antialiased text.\n\n   3. This noticeably *harms* rendering of antialiased text.\n\nPoint #3 probably surprises the rest of you as much as it surprised me. \n  Ever since turning on the bytecode interpreter, I've been bugged by a \nsense that the antialiased text in my GNOME2 applications just looked, \nwell, wrong somehow.  I finally took some comparison screen shots with \nand without the interpreter, and that made the difference crystal clear.\n\nConsider the two images attached below.  The first, \"no-bytecodes.png\", \nshows some text rendered by a GNOME2 panel menu without the bytecode \ninterpreter.  Contrast this with the second, \"bytecodes.png\", taken with \nthe bytecode interpreter enabled.\n\nWhen the bytecode interpreter is turned on, notice that several \nrendering anomalies appear:\n\n   - Several letters are narrower, giving the whole run of text a more\n     compressed feel.  This is especially noticeable in \"R\" and \"o\".\n\n   - The left side of the \"Q\" is painted in too light a shade of grey,\n     causing it to drop out somewhat.  \"C\", not in this sample, has the\n     same problem.\n\n   - \"Qu\" are set right up against each other, with insufficient\n     whitespace between them.\n\n   - \"M\" is distinctly asymmetric.\n\n   - The enclosed loop of \"a\" looks muddy, as it is partially filled\n     with grey.  Contrast with \"a\" drawn without the bytecode\n     interpreter, which has a nice clear open loop.\n\nIck.  Perhaps this is why Red Hat turned the bytecode interpreter off. \nIt may improve non-antialiased rendering, but only at the expense of \nmaking a mess of antialiased rendering.\n\nThis may come down to a matter of personal aesthetics, but for my part, \nI'm going back to Red Hat's standard packages with the bytecode \ninterpreter turned *off*."}